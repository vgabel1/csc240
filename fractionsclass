public class Fraction implements Comparable<Fraction>
{
    private final long top;
    private final long bottom;

    public Fraction(long numerator, long denominator) {
        top = numerator;
        bottom = denominator;
    }

    @Override
    public int hashCode() { return 17 * Long.hashCode(top) + Long.hashCode(bottom); }    
    @Override
    public boolean equals(Object o) { return compareTo((Fraction)o) == 0; }    
    @Override
    public int compareTo(Fraction f2){ return Long.compare(top * f2.bottom, f2.top * bottom); }
    
    // Your work here!
    //finding gcd using euclidean algorithm
    private long gcd(long a, long b) {
      while (b != 0){
        long c = b;
        b = a % b;
        a = c;
      }
      return a;
    }

    //Add two fractions
    public Fraction add(Fraction f2) {
    //using formula for adding fractions
      long top2 = top * f2.bottom + f2.top * bottom;
      long bottom2 = bottom * f2.bottom;
      
      //dividing both num. and denom. by gcd to simplify
      long gcd = gcd(top2, bottom2);
      return new Fraction(top2 / gcd, bottom2 / gcd);
    }
    
    //...and make this class string representable
    public String toString() {
      return top + "/" + bottom;
    }
}
